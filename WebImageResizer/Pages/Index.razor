@page "/"

@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp.Processing.Processors.Transforms

<style>
    textarea {
        margin: 4px, 4px;
        padding: 4px;
        width: 100%;
        height: 100%;
        -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
        -moz-box-sizing: border-box; /* Firefox, other Gecko */
        box-sizing: border-box; /* Opera/IE 8+ */
        overflow-x: hidden;
        overflow-y: auto;
        text-align: justify;
    }

    table, th, td {
        border: 1px solid black;
    }

    p {
        word-break: break-all
    }
</style>
<div style="width:100%;">
    <div>
        <p>Resize images to your specified sizes!</p>
        Resampler: <select @onchange="@SetResampler">
            @foreach (var resampler in _resamplers) {
                <option value=@(resampler.Key)>@(resampler.Key)</option>
            }
        </select>
        <br />
        Preset: <select @onchange=@SetPreset>
            @foreach (var preset in _presets) {
                <option value=@(preset.Key)>@(preset.Key)</option>
            }
        </select>
        <br />
        Number of outputs: <input type="number" value="@_targets.Count" @onchange=@SetCount placeholder="Arguments" />
        @foreach (var target in _targets) {
            <table>
                <tr>
                    <th>Width</th>
                    <th>Height</th>
                </tr>
                <tr>
                    <td><input type="number" @bind="@target.Width" /></td>
                    <td><input type="number" @bind="@target.Height" /></td>
                </tr>
            </table>
        }
    </div>


    <div class="drag-drop-zone">
        <InputFile multiple OnChange="HandleSelection" />
        Drop files here, or click to choose files
    </div>

    <div style="height:200px;">
<textarea disabled>@foreach (var line in _log) {
        @line@:
    }</textarea>
    </div>

    <div>
        Preset information was taken from the following pages:<br/>
                                                              <a href="https://help.twitch.tv/s/article/subscriber-emoticon-guide" target="_blank">Twitch - Subscriber Emoticon Guide for Partners and Affiliates</a><br />
                                                              <a href="https://help.twitch.tv/s/article/subscriber-badge-guide" target="_blank">Twitch - Subscriber Badge Guide</a><br />
                                                              <a href="https://help.twitch.tv/s/article/channel-page-setup" target="_blank">Twitch - Channel Page Setup</a>
    </div>
</div>

@inject IJSRuntime Js
@inject NavigationManager NavMan

@code {

    public class Xy {
        public Xy(int width, int height) {
            Width = width;
            Height = height;
        }
        public int Width;
        public int Height;
        public Xy Clone() => new Xy(Width, Height);
    }

    private readonly PngEncoder _encoder = new PngEncoder();

    private readonly List<string> _log = new List<string> { "Log output will be displayed here..." };
    private readonly List<Xy> _targets = new List<Xy> { new Xy(100, 100) };
    private readonly Dictionary<string, List<Xy>> _presets = new Dictionary<string, List<Xy>> {
        { "None", null },
        { "Twitch Subscriber Emoticons (28x, 56x, 112x)", new List<Xy> { new Xy(28, 28), new Xy(56, 56), new Xy(112, 112) } },
        { "Twitch Subscriber Badges (18x, 36x, 72x)", new List<Xy> { new Xy(18, 18), new Xy(36, 36), new Xy(72, 72) } },
        { "Twitch Cover Image (1200x480)", new List<Xy> { new Xy(1200, 480) } },
        { "Twitch Video Player Offline Banner (1920x1080)", new List<Xy> { new Xy(1920, 1080) } }
    };
    private readonly Dictionary<string, IResampler> _resamplers = new Dictionary<string, IResampler> {
        { "Bicubic", new BicubicResampler() },
        { "Box", new BoxResampler() },
        { "CatmullRom", new CatmullRomResampler() },
        { "Hermite", new HermiteResampler() },
        { "Lanczos2", new Lanczos2Resampler() },
        { "Lanczos3", new Lanczos3Resampler() },
        { "Lanczos5", new Lanczos5Resampler() },
        { "Lanczos8", new Lanczos8Resampler() },
        { "MitchellNetravali", new MitchellNetravaliResampler() },
        { "NearestNeighbor", new NearestNeighborResampler() },
        { "Robidoux", new RobidouxResampler() },
        { "RobidouxSharp", new RobidouxSharpResampler() },
        { "Spline", new SplineResampler() },
        { "Triangle", new TriangleResampler() },
        { "Welch", new WelchResampler() }
    };

    private IResampler _selectedResampler;

    protected override void OnInitialized() {
        _selectedResampler = _resamplers["Bicubic"];
    }

    private void SetPreset(ChangeEventArgs e) {
        if (!_presets.TryGetValue(e.Value.ToString(), out var res) || res == null) return;
        _targets.Clear();
        foreach(var r in res)
            _targets.Add(r.Clone());
    }

    private void SetResampler(ChangeEventArgs e) {
        if (!_resamplers.TryGetValue(e.Value.ToString(), out var res) || res == null) return;
        _selectedResampler = res;
    }

    private void SetCount(ChangeEventArgs e) {
        var target = (int)double.Parse(e.Value.ToString());
        if (target < 1) return;
        while (target > _targets.Count)
            _targets.Add(new Xy(100, 100));
        while (target < _targets.Count)
            _targets.RemoveAt(_targets.Count - 1);
    }

    private async Task HandleSelection(IFileListEntry[] files) {
        string last = default;
        var count = 0;
        await using var zipMs = new MemoryStream();
        await using var lastMs = new MemoryStream();
        using (var zip = new System.IO.Compression.ZipArchive(zipMs, System.IO.Compression.ZipArchiveMode.Create)) {
            foreach (var file in files) {
                if (file == null) continue;
                last = file.Name;
                Log($"Loading {last}...");
                StateHasChanged();
                await Task.Delay(5);
                var len = (int) file.Data.Length;
                lastMs.SetLength(0);
                if (lastMs.Capacity < len)
                    lastMs.Capacity = len;
                await file.Data.CopyToAsync(lastMs);
                lastMs.Position = 0;
                Log("Parsing...");
                StateHasChanged();
                await Task.Delay(5);
                using var image = Image.Load(lastMs);
                last = Path.ChangeExtension(last, ".png");
                foreach (var target in _targets) {
                    if (target.Width <= 0 || target.Height <= 0) continue;
                    Log($"Resizing {target.Width}, {target.Height}");
                    StateHasChanged();
                    await Task.Delay(5);
                    lastMs.SetLength(0);
                    image.Clone(x => x.Resize(target.Width, target.Height, _selectedResampler))
                        .Save(lastMs, _encoder);
                    await using var stream = zip.CreateEntry($"{target.Width}x{target.Height}.{last}").Open();
                    lastMs.Position = 0;
                    lastMs.CopyTo(stream);
                    count++;
                }
            }
        }
        if (count == 0) return;
        Log("Preparing download...");
        StateHasChanged();
        await Task.Delay(5);
        if (count != 1)
            await WebImageResizerUtil.SaveByteArray(Js, "WebImageResizer_result.zip", zipMs.ToArray());
        else
            await WebImageResizerUtil.SaveByteArray(Js, last, lastMs.ToArray());
        Log("That's all. Have a nice day.");
    }

    private void Log(string str) {
        _log.Insert(0, str);
        if (_log.Count > 300)
            _log.RemoveRange(300, _log.Count - 300);
    }
}
